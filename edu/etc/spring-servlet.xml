<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/context/spring-cache-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

<!-- 启动Spring的支持注解 -->
	<context:annotation-config/>
	<mvc:annotation-driven />
	<!--识别切面，开启CGLIB动态代理-->  
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 配置扫描的包 -->
	<context:component-scan base-package="com.example.controller" />
	<context:component-scan base-package="com.example.excelope.controller" />
	<context:component-scan base-package="com.edu.controller" />

	<!-- 此配置会自动扫描com.springdemo下的所有包中的含有注解的类（如@Controller, @Service等）；
		<mvc:annotation-driven />会注册两个映射类，负责将请求映射到类和方法中；因为配置的spring是拦截所有请求，
		所以需要配置<mvc:default-servlet-handler />，来让静态资源通过（如js, css文件等）；
		视图解析器是将Controller类返回的视图名加上配置的前后缀进行展示。 -->
	<!-- 访问静态资源 -->
	<mvc:default-servlet-handler />
	
	
	<!-- 完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
		<description>  
		和上面的 HandlerMapping 一样，是必需的还是非必需的呢？  
		Spring MVC 中，如果我们没有注册任何 HandlerAdaptor 到容器中，注意，我说的是任何。
		那么 DispatcherServlet 将启用后备的几个默认使用的 HandlerAdaptor 实现，包括：  
		org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter  
		org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter  
		org.springframework.web.servlet.mvc.AnnotationMethodHandlerAdaptor  
		 看见没，如果我们没有注册任何的 HandlerAdaptor，框架会准备 AnnotationMethodHandlerAdaptor 的。
		 可是由于某些原因，我们需要为某些 HandlerAdaptoer 进行一些定制化，即在容器中注册了某个 HandlerAdaptor，那么很抱歉，框架只会启用你注册的那个，而框架本身准备的不会被启用。
		 所以，你一旦为某个 HandlerMapping 进行了定制化，请别忘了把其它的 HandlerAdaptor 也注册进来，即便这些不需要定制化。
		 否则的话，后果你是可以想象的。
		 当然，除非你确保你真的只需要那一个你注册进容器的 HandlerAdaptor，否则，我再啰嗦一遍，别忘了把其它的 HandlerAdaptor 也注册进来。  
		</description>
		<!-- 添加AJAX支持 -->
        <property name="messageConverters">
            <list> 
            	<!-- 此处和版本有关，JSON-1.7.2 版本用的是：
            		org.springframework.http.converter.json.MappingJacksonHttpMessageConverter --> 
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>text/html;charset=UTF-8</value>  
                        </list>  
                    </property>  
                </bean>  
            </list>  
        </property>  
	</bean> 
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">  
		<description>  
		这点是必需的还是非必需的呢？  
		如果定义了 DefaultAnnotationHandlerMapping，它就可以将请求来的 url 和被注解了 @RequesMapping 的指进行匹配。
		当然，说这句话的前提是定义 DefaultAnnotationHandlerMapping 的优先级比定义了其它的 HandlerMapping 的优先级要高(如果定义了其它的话)。  
		如果没有定义 DefaultAnnotationHandlerMapping，并不代表不能映射到相应的 handler 上。
		因为如果你定义了其它的 HandlerMapping，请求过来的 url 和注解了的 @RequestMapping 里的值正好能匹配上，
		那么没有 DefaultAnnotationHandlerMapping，@Controller 一样可以如鱼得水的被捕获到。  
		当然，如果你要使用基于注解的 @Controller，最好还是老老实实地注册 DefaultAnnotationHandlerMapping。  
		</description>  
	</bean>
	
	
	<!-- 视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>


	<!-- ===================================== 注册自定义的类型转换类 ================================== -->
	<!-- 第三步：注册处理器映射器/处理器适配器 ，添加conversion-service属性-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    <!-- 第二步： 创建convertion-Service ，并注入dateConvert -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="dateConvert"/>
            </set>
        </property>
    </bean>
    <!-- 第一步:  创建自定义日期转换规则 -->   
    <bean id="dateConvert" class="com.edu.util.DateConverter"/>
	<!-- ===================================== 注册自定义的类型转换类 ================================== -->


<!--解析返回JSON -->
	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="1" /> 
		<!-- <property name="properties"  ref="databaseProperties"/> -->
       	<!-- 文件会覆盖数据库配置 -->
		<property name="locations">
		    <list>
		        <value>classpath:*.properties</value>
		    </list>
       	</property>
	</bean>
</beans>